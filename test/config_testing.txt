# Unit test config file.
# the function reset_config() in loc_utils will throe
#
# Managed by configuration.py; uses built-in configparser.
#
# In order to avoid anyone (like me...) pushing their API keys, database login credentials, etc.
# onto GitHub, will have a somewhat convoluted configuration structure.
#
# The procedure is as follows.
# (1) This file is loaded first by configparser (so don't delete it!)
# (2) If "config.txt" exists in the same directory, load its configuration information. This overwrites
#     selected entries, so you need only override defaults that you want. This file does not exist in the repository,
#     and I set .gitignore to ignore it. This is the "site-level" config.
# (3) To get user-specific config, set an environment variable to point at a file. The default environment
#     variable name is PLATFORM_USER_CONFIG, but yes, that is configurable.
#
# NOTE: We only know that this package is installed (somewhere), so the default directory is the package
# base directory. Default paths are relative to this directory, denoted as {BASE} (case-sensitive).
# For example, the "text_dabase" subdirectory is specified as '{BASE}/subdirectory'.
# Note that when parsing defaults, the "/" and "\" characters are replaced by the OS-specific
# seperator, so the defaults should work on any OS. However, any customised path needs to
# use the correct separator. See utils.parse_config_path().
#
# (This standard for default directories was imposed after the start of development; need to refactor code to use this.)

[Logging]
# Default in the "logs" directory below base directory.
LogDirectory = {CORE}/logs
# TODO: set the log formatting strings here...

[Options]
UseMonkeyPatchExample = False
UseExampleProvider = True
UserConfigEnvironmentVariableName = NO_USER_CONFIG_FILE_PLEASE
ForUnitTest = ExpectedAnswer
#------------------------------------------------------------------
# High level "database parameters." For a particular database (like MySQL), it should have its
# own section of parameters.
[Database]
Default=TEXT
# What variant of "SQL" is mapped to "SQL"?
SQL=SQLITE
TickerSeparator=@
dates_column=series_dates
values_column=series_values
# SQL configuration information. This could get huge, so it may migrate to a new file.
[SQL]
meta_table = SeriesMeta
data_table = SeriesData
[DatabaseList]
Text File Database=TEXT
SQLite Database=SQLITE
#------------------------------------------------------------------------
# Data associated with each database are saved as separate sections.
# Naming convention: D_{database_ticker}
[D_TEXT]
directory={PARENT}\test\data
[D_SQLITE]
file_name={PARENT}\test\data\platform.db
# Generic provider options
[ProviderOptions]
echo_access=True
[D_SQLITE_EXTRA]
TMP={PARENT}\test\data\platform_tmp.db
#-------------------------------------------------------------------
# Providers are specified by {ticker_code} = {Provider Name}
# If you don't like the ticker code assignments, you can re-map them...
#++++++++++++++++++++++++++++++++++++++
[ProviderList]
DBnomics=D
FRED=F
User=U
CANSIM_CSV=CCSV
Quandl=Q
ABS_XLS=ABSXLS
Example Provider=TEST
#+++++++++++++++++++++++++++++
# Provider-specific Info Pre-pend "P_" to name
[P_FRED]
# Need to get a free API key from the St. Louis FED. (Put into an external config file if you are using GIT),
api_key=THIS_TEXT_SHOULD_NOT_APPEAR_IN_TEST
[P_STATSCAN]
# Directory information . Note that if these defaults are used, this means it goes below the providers directory.
# Which means that we don't need to worry about the directory separaor in this case.
directory = {PARENT}\test\data\cansim_csv
zip_tail=-eng.zip
