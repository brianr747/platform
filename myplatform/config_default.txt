# Default Configuration File
#
# Managed by configuration.py; uses built-in configparser.
#
# In order to avoid anyone (like me...) pushing their API keys, database login credentials, etc.
# onto GitHub, will have a somewhat convoluted configuration structure.
#
# The procedure is as follows.
# (1) This file is loaded first by configparser (so don't delete it!)
# (2) If "config.txt" exists in the same directory, load its configuration information. This overwrites
#     selected entries, so you need only override defaults that you want. This file does not exist in the repository,
#     and I set .gitignore to ignore it.
# (3) The configuration parameter [ActualConfigFile][FileName] is checked to see if it is the path to
#     a file on the file system. If so, it is loaded.
#
# What I did is place my actual config file outside the repository directory structure, so it will never get checked in.
# config.txt just overrides the [ActualCongFile] value. That is, the contents of config.txt is:
#
# [ActualConfigFile]
# FileName = {Windows Path}
#
#
[ActualConfigFile]
FileName = NA
[Logging]
# Default in the "logs" directory below myplatform.
LogDirectory = DEFAULT
[Options]
UseMonkeyPatchExample = False
# TODO: set the log formatting strings here...
#------------------------------------------------------------------
# High level "database parameters." For a particular database (like MySQL), it should have its
# own section of parameters.
[Database]
Default=TEXT
# What variant of "SQL" is mapped to "SQL"?
SQL=SQLITE
TickerSeparator=@
dates_column=series_dates
values_column=series_values
# SQL configuration information. This could get huge, so it may migrate to a new file.
[SQL]
meta_table = SeriesMeta
data_table = SeriesData
[DatabaseList]
Text File Database=TEXT
SQLite Database=SQLITE
#------------------------------------------------------------------------
# Data associated with each database are saved as separate sections.
# Naming convention: D_{database_ticker}
[D_TEXT]
directory=text_database
[D_SQLITE]
# If left as "myplatform", drops the database file into myplatform base directory
directory=myplatform
file_name=platform.db
# Generic provider options
[ProviderOptions]
echo_access=True
#-------------------------------------------------------------------
# Providers are specified by {ticker_code} = {Provider Name}
# If you don't like the ticker code assignments, you can re-map them...
#++++++++++++++++++++++++++++++++++++++
[ProviderList]
DBnomics=D
FRED=F
User=U
CANSIM_CSV=CCSV
Quandl=Q
#+++++++++++++++++++++++++++++
# Provider-specific Info Pre-pend "P_" to name
[P_FRED]
# Need to get a free API key from the St. Louis FED. (Put into an external config file if you are using GIT),
api_key=NONE
[P_CCSV]
# Directory information . Note that if these defaults are used, this means it goes below the providers directory.
# Which means that we don't need to worry about the directory separaor in this case.
zip_directory = cansim_csv
parsed_directory = cansim_csv/parsed
zip_tail=-eng.zip